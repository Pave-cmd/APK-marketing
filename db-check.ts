/**
 * Tento skript slou≈æ√≠ k p≈ô√≠m√© diagnostice probl√©m≈Ø s datab√°z√≠
 */
import mongoose from 'mongoose';
import User from './src/models/User';
import { connectDB } from './src/config/db';

// Spustit testy datab√°ze
async function runDatabaseTests() {
  try {
    // P≈ôipojen√≠ k datab√°zi
    await connectDB();
    console.log('‚úÖ P≈ôipojeno k MongoDB.');

    // TEST 1: Naƒçten√≠ u≈æivatel≈Ø
    console.log('\nüîé TEST 1: Naƒç√≠t√°n√≠ u≈æivatel≈Ø');
    const users = await User.find({});
    console.log(`Poƒçet u≈æivatel≈Ø v datab√°zi: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ùå ≈Ω√°dn√≠ u≈æivatel√© nenalezeni. Datab√°ze m≈Ø≈æe b√Ωt pr√°zdn√°.');
      process.exit(1);
    }

    // Vyps√°n√≠ detail≈Ø u≈æivatel≈Ø
    users.forEach((user, index) => {
      console.log(`\nU≈æivatel #${index + 1}:`);
      console.log(`ID: ${user._id}`);
      console.log(`Email: ${user.email}`);
      console.log(`Pl√°n: ${user.plan}`);
      console.log(`Weby: ${JSON.stringify(user.websites || [])}`);
      console.log(`Typ websites: ${typeof user.websites}`);
      console.log(`Je websites pole: ${Array.isArray(user.websites)}`);
      
      // Uk√°zat schema
      const schemaObj = (User.schema as any).obj;
      console.log(`Schema pole websites:`, schemaObj.websites);
    });

    // TEST 2: Zkusit p≈ôidat web p≈ô√≠mo - prvn√≠ u≈æivatel
    const testUserId = users[0]._id;
    const testUrl = 'https://test-web-' + Date.now() + '.com';
    
    console.log(`\nüîé TEST 2: P≈ôid√°n√≠ webu ${testUrl} u≈æivateli ${testUserId}`);
    
    // 2.1: P≈ôidat web pomoc√≠ findByIdAndUpdate
    console.log('METODA 1: findByIdAndUpdate');
    const updateResult1 = await User.findByIdAndUpdate(
      testUserId,
      { $push: { websites: testUrl + '-method1' } },
      { new: true }
    );
    
    console.log('V√Ωsledek:', updateResult1?.websites || 'chyba');
    
    // 2.2: P≈ôidat web pomoc√≠ updateOne
    console.log('\nMETODA 2: updateOne');
    const updateResult2 = await User.updateOne(
      { _id: testUserId },
      { $push: { websites: testUrl + '-method2' } }
    );
    
    console.log('V√Ωsledek:', updateResult2);
    
    // 2.3: Naƒç√≠st, upravit, ulo≈æit
    console.log('\nMETODA 3: findById, .save()');
    const user = await User.findById(testUserId);
    
    if (user) {
      const websitesArray = Array.isArray(user.websites) ? user.websites : [];
      websitesArray.push(testUrl + '-method3');
      user.websites = websitesArray;
      
      const saveResult = await user.save();
      console.log('V√Ωsledek:', saveResult.websites);
    } else {
      console.log('‚ùå U≈æivatel nenalezen.');
    }
    
    // 2.4 Naƒç√≠st u≈æivatele znovu pro kontrolu
    console.log('\nKontrola aktualizac√≠:');
    const updatedUser = await User.findById(testUserId);
    console.log('Aktu√°ln√≠ weby:', updatedUser?.websites);
    
    console.log('\n‚úÖ Testy dokonƒçeny.');
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi testov√°n√≠:', error);
  } finally {
    // Ukonƒçit p≈ôipojen√≠
    await mongoose.disconnect();
    console.log('Odpojeno od MongoDB.');
    process.exit(0);
  }
}

// Spustit testy
runDatabaseTests();